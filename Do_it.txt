How to do ft_irc

First of all, it is a configuration project. 
The client does basically everything for you by forwarding some messages
that do a specific thing: the job is to get the server to do specific things
based on the cmd they get from the client 

useful read before starting https://www.ietf.org/rfc/rfc1459.txt

/ ___|   ___ | |_ | |_ (_) _ __    __ _ 
\___ \  / _ \| __|| __|| || '_ \  / _` |
 ___) ||  __/| |_ | |_ | || | | || (_| |
|____/  \___| \__| \__||_||_| |_| \__, |
                                  |___/ 

 _    _      _                                   
| |_ | |__  (_) _ __    __ _  ___   _   _  _ __  
| __|| '_ \ | || '_ \  / _` |/ __| | | | || '_ \ 
| |_ | | | || || | | || (_| |\__ \ | |_| || |_) |
 \__||_| |_||_||_| |_| \__, ||___/  \__,_|| .__/ 
                       |___/              |_|    

SERVER 
    - duh
CLIENT
     - each client has a NICKNAME of max 9 chars
USER 
    - one for every client, saves User ID , Nickname and password directly from client
    - needs to be able to be set to super User
    - needs to be able to be silent and limited to some things
OPERATOR USER 
    - has @next to nickname. 
CHANNEL - named group of one or more clinets which all receive message addressed to channel 
        - names are str with & or #
        - max name len 200
        - name cannot have white spaces, ascii 7 or ','
        - max 10 channels per USER
        - +i means you can join channel only via invite
        - has 'operator' which is the user owner of channel 
        - channel has a mode
        - has a ban list of users that cannot access
        - can have a password
MESSAGES 
    - if starts with valid CMD, client receives specific response
    -3 main parts   
        1. prefix (optional)
            - prefix is signaled with : before
            - there must be non whitespace between : and prefix
            - used by servers to indicate true orifin of the message, if missing,
                it is assumed the message was originated from the connection
                from which it was received
        2. CMD
        3. command parameter (up to 15)
    all are separated by one or more white spaces
    - all messages are terminated with a CR-LF (\r or \n)
    - message should not exceed 512 chars in length


Commands of USR
    JOIN    creates new channel or becomes part of existing channel
            - user cannot join if name matches channel bans
            - can be protected by password
                JOIN <channel>
                JOIN <channel>, <password>.
            - Numeric Replies:

           ERR_NEEDMOREPARAMS              ERR_BANNEDFROMCHAN
           ERR_INVITEONLYCHAN              ERR_BADCHANNELKEY
           ERR_CHANNELISFULL               ERR_BADCHANMASK
           ERR_NOSUCHCHANNEL               ERR_TOOMANYCHANNELS
           RPL_TOPIC

    NICK    changes nickname DONE
        - checks for same nicknames
        - if same, blocks
        - if new, sets and destroys previous nick DONE
    QUIT    client session ends DONE
Commands of Operator User
    KICK - eliminates a user from a channel
    MODE - changes the channel mode
    INVITE - invites user to channel 
    TOPIC - changes channel topic in mode +t 

creates a new sub-chat in the chat

WHAT TO DO 

1. First of all, activate server and get it to listen DONE
2. bind relation with port DONE
3. get info from client DONE
    - Store client port DONE
    - add channel vector to SERVER class DONE
4. Set up tools
    - add instructions to send to client DONE
    - incoming str from client cleaner DONE
    - name on terminal DONE
    - uodate user DONE
5. verify password 
    - display password ok on client DONE
6. create user
    - add check on username
    - display user DONE
7. set nickname
    - add check on nickname
    - show set nickname DONE
8. Confirm registration 
    - welcome message
9. Allow PRVMSG between clients DONE
    - change cmd to /msg not PRVMSG
10. Create channels 
    - store in server vector DONE
    - store channels in user
    - has a name and can have a password
    - user that creates channel is channel operator DONE
    - operator of channel can kick out users
    - users can be in max 10 channels at the time
    - returns error if user is in blacklist
    - /topic channel_name new_channel_name changes channel name
    - channel modes 
        +t only operatos can change channel name
        +i only via invite (/invite username channel name, automatic message invites user to channel)
        +m only operator can send message
        +s secret 
        +p private, like s but I can see users

    -add general channel command to show channels in server

11. General cmd
    - /list, shows all channels (name, number of users, modes)
    - /whois username shows info on a user (nick, real name, hostname, server, channels currently in, marks like bans)
    - /me displays a message next to the username like "/me waves hello" is username waves hello;

12. clean code
13. check memory
14. test the sh**t out of it 




1. ACTIVATING SERVER AND GETTING IT TO listen

Ok this is where all the socket library comes into play. 
Our goal in order is to 

    a. parse in the main to filter the right info 
    b. create a server class that will store some information
    c. initiate the server

SOME INFO ON THE CODE 

int Server::start(int port)

- int server_socket; declares a variable named server_socket of type int, which will be used to store the server socket descriptor.
- int yes = 1; declares a variable named yes of type int and initializes it with the value 1. This variable will be used later when setting the socket option SO_REUSEADDR.
- sockaddr_in sock; declares a variable named sock of type sockaddr_in. This struct is used to store the address information (IP address and port number) of the server socket.
- sock.sin_family = AF_INET; sets the address family of the server socket to AF_INET, which is used for IPv4 addresses.
- sock.sin_port = htons(port); sets the port number of the server socket to the value passed in as the port argument, and converts it to the correct byte order using the htons() function.
- int addr = inet_pton(AF_INET, "127.0.0.1", &sock.sin_addr); sets the IP address of the server socket to the value passed in as the "127.0.0.1", and converts it to the correct format using the inet_pton() function.
- if (addr <= 0) { checks the return value of the inet_pton() function. If the return value is less than or equal to 0, it means that the IP address passed in is not valid.
- std::cerr << "Invalid IP address" << std::endl; Prints an error message to the standard error output if the IP address is invalid.
- server_socket = socket(AF_INET, SOCK_STREAM, 0); creates a new socket and assigns the descriptor to the server_socket variable. The socket() function takes three arguments: the address family (AF_INET), the type of socket (SOCK_STREAM for TCP), and the protocol (0 for the default protocol).
- if (server_socket < 0) { checks if the socket was created successfully. If the return value is less than 0, it means that an error occurred.
- setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)); sets the socket option SO_REUSEADDR on the server socket using the setsockopt() function. This allows the server to reuse the same IP address and port number after the socket is closed.
- if (bind(server_socket, (sockaddr*)&sock, sizeof(sock)) < 0) { binds the server socket to the IP address and port number specified in the sock struct using the bind() function. If the return value is less than 0, it means that an error occurred.


Server::go() 

TLDR    This function is responsible for accepting and securing connections with multiple clients
        and each message respectively.



- std::vector<pollfd> client_fds is a vector of pollfd structs, where each struct represents a file descriptor that is being monitored for events. The vector is used to store all the file descriptors of connected clients.
- struct pollfd server_pfd is a struct that represents the file descriptor of the server socket. It includes the file descriptor, the events to be monitored, and the events that have occurred. In this case, the server file descriptor is being monitored for incoming connections (POLLIN event).
- client_fds.push_back(server_pfd); adds the server file descriptor to the vector of client file descriptors. This is done so that the server file descriptor can be monitored alongside the client file descriptors using the poll() function.
- int ret = poll(client_fds.data(), client_fds.size(), -1); is a call to the poll() function, which monitors a set of file descriptors for events. The first argument is a pointer to the beginning of the array of file descriptors (in this case, the vector of client file descriptors), the second argument is the number of file descriptors in the array, and the third argument is the timeout in milliseconds (-1 means to wait indefinitely). The function returns the number of file descriptors that have events pending, or -1 if an error occurred.
- The following block of code is checking if the server file descriptor (the first file descriptor in the vector) has an incoming connection event (POLLIN) pending. If it does, it accepts the incoming connection, creates a new pollfd struct for the new client, adds the new client to the vector of client file descriptors, prints a message with the client's IP address and port, and confirms the secure connection.
- The final section of the code is checking all the client file descriptors in the vector for events. If an event is pending for a client file descriptor, it handles the event accordingly. This allows multiple messages to be handled simultaneously from multiple clients.